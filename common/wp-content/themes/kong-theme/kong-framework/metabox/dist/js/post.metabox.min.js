/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	//require('./3rd/angular-drag-and-drop-list.js');
	
	(function (angular) {
	    'use strict';
	
	    var app = angular.module('kong.post.metabox', ['colorpicker.module']);
	
	    app.__config = {
	        enableDebug: false
	    };
	
	    if (typeof kong_mb_data != 'undefined') {
	        app.__config = angular.merge(app.__config, kong_mb_data);
	    }
	    console.log(app.__config);
	
	    app.controller('kong.post.metabox.controller', function () {}).config(["$provide", "$httpProvider", function ($provide, $httpProvider) {
	        $provide.factory('lbHttpInterceptor', ["$q", "$rootScope", function ($q, $rootScope) {
	            return {
	                request: function request(config) {
	                    config.headers['X-WP-Nonce'] = app.__config.nonce;
	
	                    return config || $q.when(config);
	                },
	                'responseError': function responseError(rejection) {
	                    if (typeof rejection.data !== 'undefined' && rejection.data.code == 'rest_cookie_invalid_nonce') {
	                        $rootScope.$emit('expired_session');
	                    }
	
	                    return $q.reject(rejection);
	                }
	            };
	        }]);
	        $httpProvider.interceptors.push('lbHttpInterceptor');
	    }]);
	
	    app.config(['$compileProvider', function ($compileProvider) {
	        // Should be turn off in production
	        $compileProvider.debugInfoEnabled(app.__config.enableDebug);
	    }]);
	
	    app.component('postMetabox', {
	        controller: ["$rootScope", function controller($rootScope) {
	            this.model = app.__config.settings;
	
	            this.setting = {
	                current_tab: 1,
	                tabs: [{ id: 1, name: 'Main' }, { id: 2, name: 'Colors' }, { id: 3, name: 'Redirect Link' }],
	                get_current: function get_current() {
	                    return this.current_tab;
	                },
	                is_current: function is_current(tab) {
	                    return tab == this.current_tab;
	                },
	                set_current: function set_current(tab) {
	                    console.log(tab);
	                    this.current_tab = tab;
	                }
	            };
	
	            $rootScope.$on('expired_session', function () {
	                document.location.replace(app.__config.login_url);
	            });
	        }],
	        template: '<input type="hidden" id="kong-settings" name="kong-settings" value="{{$ctrl.model}}"/><div class="kong-mb__container"><mb-header model="$ctrl.model"></mb-header><mb-body model="$ctrl.model" setting="$ctrl.setting"></mb-body></div>'
	    });
	
	    app.component('mbHeader', {
	        controller: ["$timeout", "$http", function controller($timeout, $http) {
	            this.$onInit = function () {
	                var $ctrl = this;
	                this.state = 'disabled';
	                var previousData = JSON.stringify($ctrl.model);
	
	                this.save = function (e) {
	                    e.preventDefault();
	                    if ($ctrl.state == 'ready') {
	                        $ctrl.state = 'saving';
	
	                        $http({
	                            method: 'POST',
	                            url: app.__config.api + '/settings',
	                            data: {
	                                id: app.__config.post_id,
	                                settings: JSON.stringify($ctrl.model)
	                            }
	                        }).then(function (data) {
	                            if (data.data != -1) {
	                                $ctrl.state = 'saved';
	
	                                $timeout(function () {
	                                    previousData = JSON.stringify($ctrl.model);
	                                    $ctrl.state = 'disabled';
	                                }, 1000);
	                            } else {
	                                alert('Error in saving data');
	                                $ctrl.state = 'ready';
	                            }
	                        }, function (error) {
	                            alert('Error in saving data');
	                            $ctrl.state = 'ready';
	                        });
	                    }
	                };
	
	                $ctrl.getState = function () {
	                    if ($ctrl.state == 'disabled' && JSON.stringify($ctrl.model) !== previousData) {
	                        $ctrl.state = "ready";
	                    }
	
	                    return $ctrl.state;
	                };
	            };
	        }],
	        template: '<div class="kong-mb__header"><h6 class="kong-mb__header__title">Settings</h6><button class="kong-mb__saveBtn kong-ui__btn kong-ui__btn--primary" ng-class="\'kong-mb__saveBtn--\'+$ctrl.getState()" ng-click="$ctrl.save($event)"><span>Saved</span><span>Save</span><span></span><span><i class="fa fa-check" aria-hidden="true"></i></span></button></div>',
	        bindings: {
	            model: '<'
	        }
	    });
	
	    app.component('mbBody', {
	        controller: function controller() {},
	        template: '<div class="kong-mb__body"><mb-menu on-select="$ctrl.setting.set_current(id)" tabs="$ctrl.setting.tabs" current-tab="$ctrl.setting.current_tab"></mb-menu><mb-panel current-tab="$ctrl.setting.current_tab" model="$ctrl.model"></mb-panel></div>',
	        bindings: {
	            model: '=',
	            setting: '<',
	            current: '<'
	        }
	    });
	
	    app.component('mbMenu', {
	        controller: function controller() {},
	        template: '<div class="kong-mb__menu"><ul><li class="kong-mb__menu__item"ng-class="{\'kong-mb__menu__item--active\':$ctrl.currentTab == item.id}"ng-click="$ctrl.onSelect(item)"ng-repeat="item in ::$ctrl.tabs" ng-bind="::item.name"></li></ul></div>',
	        bindings: {
	            onSelect: '&',
	            tabs: '<',
	            currentTab: '<'
	        }
	    });
	
	    app.component('mbPanel', {
	        controller: function controller() {},
	        template: '<div class="kong-mb__panelContainer"><mb-feature-panel ng-show="$ctrl.currentTab == 1" model="$ctrl.model.feature"></mb-feature-panel><mb-grid-panel ng-show="$ctrl.currentTab == 2" model="$ctrl.model.full"></mb-grid-panel><mb-redirect-panel ng-show="$ctrl.currentTab == 3" model="$ctrl.model.redirect_link"></mb-redirect-panel></div>',
	        bindings: {
	            currentTab: '<',
	            model: '='
	        }
	    });
	
	    app.component('mbFeaturePanel', {
	        controller: ["$scope", function controller($scope) {}],
	        template: '<div class="kong-mb__section"><h3 class="kong-mb__section__name">Feature Image</h3><p class="kong-mb__section__desc">Upload an image to be the feature picture of this post.</p><kong-ed-feature-image image-url="$ctrl.model.url"  image-size="$ctrl.model.padding" image-id="$ctrl.model.id"></kong-ed-feature-image></div><div class="kong-mb__section"><h3 class="kong-mb__section__name">Discard Container</h3><p class="kong-mb__section__desc">In the case you build your content by Page Builder, this feature should be enable to get rid of the wrap container.</p><kong-ed-switch model="$ctrl.model.discard_container"></kong-ed-switch></div>',
	        bindings: {
	            model: '='
	        }
	    });
	
	    app.component('kongEdFeatureImage', {
	        controller: ["$scope", function controller($scope) {
	            var $ctrl = this;
	            var image_frame;
	            var image;
	
	            this.upload = function () {
	                image_frame = wp.media({
	                    title: 'Upload or Choose from Media Library',
	                    button: {
	                        text: 'Select Image'
	                    },
	                    multiple: false
	                });
	                image_frame.on('select', function () {
	                    image = image_frame.state().get('selection').first().toJSON();
	                    console.log(image);
	                    $scope.$apply(function () {
	                        $ctrl.imageId = image.id;
	                        $ctrl.imageSize = image.sizes.full.height * 100 / image.sizes.full.width;
	                        $ctrl.imageUrl = image.url;
	                    });
	                });
	
	                image_frame.open();
	            };
	
	            this.remove = function () {
	                $ctrl.imageId = '';
	                $ctrl.imageSize = '';
	                $ctrl.imageUrl = '';
	            };
	        }],
	        template: '<div class="kong-ui__heroImage"><div class="kong-ui__heroImage__header"><span class="kong-ui__btn kong-ui__btn--remove kong-ui--marginRight3" ng-click="$ctrl.remove()" ng-show="$ctrl.imageUrl"><span class="fa fa-trash"></span> Remove</span><span class="kong-ui__btn kong-ui__btn--plain" ng-click="$ctrl.upload()"><span class="fa fa-upload"></span> Upload</span></div><div class="kong-ui__heroImage__body" ng-class="{\'kong-ui__heroImage__body--hasImage\':$ctrl.imageUrl }" ng-style="{\'background-image\':\'url(\'+$ctrl.imageUrl+\')\'}"><span class="fa fa-picture-o" ng-show="!$ctrl.imageUrl"></span></div></div>',
	        bindings: {
	            imageUrl: '=',
	            imageId: '=',
	            imageSize: '='
	        }
	    });
	
	    app.component('mbRedirectPanel', {
	        controller: function controller() {},
	        template: '<div class="kong-mb__section"><h3 class="kong-mb__section__name">Redirect Link</h3><p class="kong-mb__section__desc">In the case you do not want to use the default post link, paste your redirect link in to the field.</p><textarea class="kong-ui__textarea" type="text" ng-model="$ctrl.model" rows="5" cols="20" ng-model-options="{debounce:500}"/></div>',
	        bindings: {
	            model: '='
	        }
	    });
	
	    app.component('mbGridPanel', {
	        controller: function controller() {},
	        template: '<div class="kong-mb__panel"><div class="kong-mb__section"><h3 class="kong-mb__section__name">Background</h3><p class="kong-mb__section__desc">The colors will be used for the image layout in the case the post does not include a feature image.</p><div><kong-ed-colorpicker model="$ctrl.model.background" format="rgba"></kong-ed-colorpicker></div></div><div class="kong-mb__section kong-mb__section--noVPadding"><div class="kong-mb__section--1-2"><h3 class="kong-mb__section__name">Main</h3><p class="kong-mb__section__desc">Select a main color for link and title.</p><div><kong-ed-colorpicker model="$ctrl.model.main" format="rgba"></kong-ed-colorpicker></div></div><div class="kong-mb__section--1-2"><h3 class="kong-mb__section__name">Desc</h3><p class="kong-mb__section__desc">Select a color for description text.</p><div><kong-ed-colorpicker model="$ctrl.model.desc" format="rgba"></kong-ed-colorpicker></div></div></div></div>',
	        bindings: {
	            model: '='
	        }
	    });
	
	    /**
	     * Component for COLORPICKER
	     */
	    app.component('kongEdColorpicker', {
	        controller: function controller() {},
	        template: '<div class="kong-ui__colorpicker"><small ng-show="$ctrl.model != \'transparent\'" class="kong-ui__colorpicker__transparentBtn" ng-click="$ctrl.model=\'transparent\'" title="Transparent"><i class="fa fa-genderless" aria-hidden="true"></i></small><input class="kong-ui__colorpicker__input" ng-model="$ctrl.model" type="text"><span class="kong-ui__colorpicker__picker" colorpicker="{{::$ctrl.format}}" colorpicker-position="bottom" ng-model="$ctrl.model" ng-model-options="{ debounce: 250 }"><i ng-style="{\'background-color\':$ctrl.model}"></i></span></div>',
	        bindings: {
	            model: '=',
	            format: '@'
	        }
	    });
	
	    /**
	     * Component for SWITCH
	     */
	    var kong_switch_id = 0;
	    app.component('kongEdSwitch', {
	        controller: function controller() {
	            this.id = 'lbswid-' + ++kong_switch_id;
	        },
	        template: '<div class="kong-ui__switch"><input class="kong-ui__switch__checkbox" type="checkbox" ng-model="$ctrl.model" id="{{::$ctrl.id}}"/><label class="kong-ui__switch__btn" for="{{::$ctrl.id}}"><span class="kong-ui__switch__btn__toggle"></span></label></div>',
	        bindings: {
	            model: '='
	        }
	    });
	
	    /**
	     * Component for a normal TEXT INPUT field
	     */
	    app.component('kongEdText', {
	        controller: ["$scope", function controller($scope) {}],
	        template: '<div class="kong-ui__text"><input class="kong-ui__text__input kong-ui__input-text" ng-trim="true" ng-model="$ctrl.model" type="text" ng-model-options="{debounce:250}"/><span class="kong-ui__text__clear-btn" ng-show="$ctrl.model" ng-click="$ctrl.model=\'\'"><i class="fa fa-cross"></i></span></div>',
	        bindings: {
	            model: '='
	        }
	    });
	})(window.angular);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";
	
	/*!
	 * Colorpicker
	 */
	angular.module("colorpicker.module", []).factory("Helper", function () {
	  "use strict";
	  return { closestSlider: function closestSlider(e) {
	      var o = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector;return o.bind(e)("I") ? e.parentNode : e;
	    }, getOffset: function getOffset(e, o) {
	      for (var t = 0, n = 0, r = e.getBoundingClientRect(); e && !isNaN(e.offsetLeft) && !isNaN(e.offsetTop);) {
	        o || "BODY" !== e.tagName ? (t += e.scrollLeft, n += e.scrollTop) : (t += document.documentElement.scrollLeft || e.scrollLeft, n += document.documentElement.scrollTop || e.scrollTop), e = e.offsetParent;
	      }return { top: r.top + window.pageYOffset, left: r.left + window.pageXOffset, scrollX: t, scrollY: n };
	    }, stringParsers: [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, parse: function parse(e) {
	        return [e[1], e[2], e[3], e[4]];
	      } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/, parse: function parse(e) {
	        return [2.55 * e[1], 2.55 * e[2], 2.55 * e[3], e[4]];
	      } }, { re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/, parse: function parse(e) {
	        return [parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)];
	      } }, { re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/, parse: function parse(e) {
	        return [parseInt(e[1] + e[1], 16), parseInt(e[2] + e[2], 16), parseInt(e[3] + e[3], 16)];
	      } }] };
	}).factory("Color", ["Helper", function (e) {
	  "use strict";
	  return { value: { h: 1, s: 1, b: 1, a: 1 }, rgb: function rgb() {
	      var e = this.toRGB();return "rgb(" + e.r + "," + e.g + "," + e.b + ")";
	    }, rgba: function rgba() {
	      var e = this.toRGB();return "rgba(" + e.r + "," + e.g + "," + e.b + "," + e.a + ")";
	    }, hex: function hex() {
	      return this.toHex();
	    }, RGBtoHSB: function RGBtoHSB(e, o, t, n) {
	      e /= 255, o /= 255, t /= 255;var r, i, l, c;return l = Math.max(e, o, t), c = l - Math.min(e, o, t), r = 0 === c ? null : l === e ? (o - t) / c : l === o ? (t - e) / c + 2 : (e - o) / c + 4, r = (r + 360) % 6 * 60 / 360, i = 0 === c ? 0 : c / l, { h: r || 1, s: i, b: l, a: n || 1 };
	    }, setColor: function setColor(o) {
	      o = o ? o.toLowerCase() : o;for (var t in e.stringParsers) {
	        if (e.stringParsers.hasOwnProperty(t)) {
	          var n = e.stringParsers[t],
	              r = n.re.exec(o),
	              i = r && n.parse(r);if (i) return this.value = this.RGBtoHSB.apply(null, i), !1;
	        }
	      }
	    }, setHue: function setHue(e) {
	      this.value.h = 1 - e;
	    }, setSaturation: function setSaturation(e) {
	      this.value.s = e;
	    }, setLightness: function setLightness(e) {
	      this.value.b = 1 - e;
	    }, setAlpha: function setAlpha(e) {
	      this.value.a = parseInt(100 * (1 - e), 10) / 100;
	    }, toRGB: function toRGB(e, o, t, n) {
	      e || (e = this.value.h, o = this.value.s, t = this.value.b), e *= 360;var r, i, l, c, s;return e = e % 360 / 60, s = t * o, c = s * (1 - Math.abs(e % 2 - 1)), r = i = l = t - s, e = ~~e, r += [s, c, 0, 0, c, s][e], i += [c, s, s, c, 0, 0][e], l += [0, 0, c, s, s, c][e], { r: Math.round(255 * r), g: Math.round(255 * i), b: Math.round(255 * l), a: n || this.value.a };
	    }, toHex: function toHex(e, o, t, n) {
	      var r = this.toRGB(e, o, t, n);return "#" + (1 << 24 | parseInt(r.r, 10) << 16 | parseInt(r.g, 10) << 8 | parseInt(r.b, 10)).toString(16).substr(1);
	    } };
	}]).factory("Slider", ["Helper", function (e) {
	  "use strict";
	  var o = { maxLeft: 0, maxTop: 0, callLeft: null, callTop: null, knob: { top: 0, left: 0 } },
	      t = {};return { getSlider: function getSlider() {
	      return o;
	    }, getLeftPosition: function getLeftPosition(e) {
	      return Math.max(0, Math.min(o.maxLeft, o.left + ((e.pageX || t.left) - t.left)));
	    }, getTopPosition: function getTopPosition(e) {
	      return Math.max(0, Math.min(o.maxTop, o.top + ((e.pageY || t.top) - t.top)));
	    }, setSlider: function setSlider(n, r) {
	      var i = e.closestSlider(n.target),
	          l = e.getOffset(i, r),
	          c = i.getBoundingClientRect(),
	          s = n.clientX - c.left,
	          a = n.clientY - c.top;o.knob = i.children[0].style, o.left = n.pageX - l.left - window.pageXOffset + l.scrollX, o.top = n.pageY - l.top - window.pageYOffset + l.scrollY, t = { left: n.pageX - (s - o.left), top: n.pageY - (a - o.top) };
	    }, setSaturation: function setSaturation(e, t) {
	      o = { maxLeft: 100, maxTop: 100, callLeft: "setSaturation", callTop: "setLightness" }, this.setSlider(e, t);
	    }, setHue: function setHue(e, t) {
	      o = { maxLeft: 0, maxTop: 100, callLeft: !1, callTop: "setHue" }, this.setSlider(e, t);
	    }, setAlpha: function setAlpha(e, t) {
	      o = { maxLeft: 0, maxTop: 100, callLeft: !1, callTop: "setAlpha" }, this.setSlider(e, t);
	    }, setKnob: function setKnob(e, t) {
	      o.knob.top = e + "px", o.knob.left = t + "px";
	    } };
	}]).directive("colorpicker", ["$document", "$compile", "Color", "Slider", "Helper", function (e, o, t, n, r) {
	  "use strict";
	  return { require: "?ngModel", restrict: "A", link: function link(i, l, c, s) {
	      function a() {
	        e.on("mousemove", p), e.on("mouseup", f);
	      }function u() {
	        try {
	          A.css("backgroundColor", O[x]());
	        } catch (e) {
	          A.css("backgroundColor", O.toHex());
	        }M.css("backgroundColor", O.toHex(O.value.h, 1, 1, 1)), "rgba" === x && (b.css.backgroundColor = O.toHex());
	      }function p(e) {
	        var o = n.getLeftPosition(e),
	            t = n.getTopPosition(e),
	            r = n.getSlider();n.setKnob(t, o), r.callLeft && O[r.callLeft].call(O, o / 100), r.callTop && O[r.callTop].call(O, t / 100), u();var c = O[x]();return l.val(c), s && i.$apply(s.$setViewValue(c)), L && D.val(c), !1;
	      }function f() {
	        m("colorpicker-selected"), e.off("mousemove", p), e.off("mouseup", f);
	      }function d(e) {
	        O.setColor(l.val()), L && !e && D.val(l.val()), B.eq(0).css({ left: 100 * O.value.s + "px", top: 100 - 100 * O.value.b + "px" }), B.eq(1).css("top", 100 * (1 - O.value.h) + "px"), B.eq(2).css("top", 100 * (1 - O.value.a) + "px"), u();
	      }function h() {
	        var e,
	            o = r.getOffset(l[0]);return angular.isDefined(c.colorpickerParent) && (o.left = 0, o.top = 0), "top" === w ? e = { top: o.top - 147, left: o.left } : "right" === w ? e = { top: o.top, left: o.left + 126 } : "bottom" === w ? e = { top: o.top + l[0].offsetHeight + 2, left: o.left } : "left" === w && (e = { top: o.top, left: o.left - 150 }), { top: e.top + "px", left: e.left + "px" };
	      }function g() {
	        v();
	      }function k() {
	        T.hasClass("colorpicker-visible") || (d(), T.addClass("colorpicker-visible").css(h()), m("colorpicker-shown"), S === !1 && e.on("mousedown", g), c.colorpickerIsOpen && (i[c.colorpickerIsOpen] = !0, i.$$phase || i.$digest()));
	      }function m(e) {
	        s && i.$emit(e, { name: c.ngModel, value: s.$modelValue });
	      }function v() {
	        T.hasClass("colorpicker-visible") && (T.removeClass("colorpicker-visible"), m("colorpicker-closed"), e.off("mousedown", g), c.colorpickerIsOpen && (i[c.colorpickerIsOpen] = !1, i.$$phase || i.$digest()));
	      }var b,
	          x = c.colorpicker ? c.colorpicker : "hex",
	          w = angular.isDefined(c.colorpickerPosition) ? c.colorpickerPosition : "bottom",
	          S = angular.isDefined(c.colorpickerInline) ? c.colorpickerInline : !1,
	          I = angular.isDefined(c.colorpickerFixedPosition) ? c.colorpickerFixedPosition : !1,
	          C = angular.isDefined(c.colorpickerParent) ? l.parent() : angular.element(document.body),
	          L = angular.isDefined(c.colorpickerWithInput) ? c.colorpickerWithInput : !1,
	          $ = L ? '<input type="text" name="colorpicker-input" spellcheck="false">' : "",
	          P = S ? "" : '<button type="button" class="close close-colorpicker">&times;</button>',
	          H = '<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha><colorpicker-preview></colorpicker-preview>' + $ + P + "</div></div>",
	          T = angular.element(H),
	          O = t,
	          y = T.find("colorpicker-hue"),
	          M = T.find("colorpicker-saturation"),
	          A = T.find("colorpicker-preview"),
	          B = T.find("i");if (o(T)(i), L) {
	        var D = T.find("input");D.on("mousedown", function (e) {
	          e.stopPropagation();
	        }).on("keyup", function () {
	          var e = this.value;l.val(e), s && s.$modelValue !== e && (i.$apply(s.$setViewValue(e)), d(!0));
	        });
	      }"rgba" === x && (T.addClass("alpha"), b = T.find("colorpicker-alpha"), b.on("click", function (e) {
	        n.setAlpha(e, I), p(e);
	      }).on("mousedown", function (e) {
	        n.setAlpha(e, I), a();
	      }).on("mouseup", function (e) {
	        m("colorpicker-selected-alpha");
	      })), y.on("click", function (e) {
	        n.setHue(e, I), p(e);
	      }).on("mousedown", function (e) {
	        n.setHue(e, I), a();
	      }).on("mouseup", function (e) {
	        m("colorpicker-selected-hue");
	      }), M.on("click", function (e) {
	        n.setSaturation(e, I), p(e), angular.isDefined(c.colorpickerCloseOnSelect) && v();
	      }).on("mousedown", function (e) {
	        n.setSaturation(e, I), a();
	      }).on("mouseup", function (e) {
	        m("colorpicker-selected-saturation");
	      }), I && T.addClass("colorpicker-fixed-position"), T.addClass("colorpicker-position-" + w), "true" === S && T.addClass("colorpicker-inline"), C.append(T), s && (s.$render = function () {
	        l.val(s.$viewValue), d();
	      }), l.on("blur keyup change", function () {
	        d();
	      }), l.on("$destroy", function () {
	        T.remove();
	      }), S === !1 ? l.on("click", k) : k(), T.on("mousedown", function (e) {
	        e.stopPropagation(), e.preventDefault();
	      }), T.find("button").on("click", function () {
	        v();
	      }), c.colorpickerIsOpen && i.$watch(c.colorpickerIsOpen, function (e) {
	        e === !0 ? k() : e === !1 && v();
	      });
	    } };
	}]);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,